SRCDIR = .
NUMDIR = numerical
QAGDIR = $(NUMDIR)/dqag
WDIR = Wfunctions
RDIR = Rfunctions
OBJDIR = obj
BINDIR = .

# The files must be sorted in their module call order so that they compile in order
CAPTNSRCS = $(addprefix $(SRCDIR)/, \
				sharedcap.f90 \
				gencap.f90 \
				opercap.f90 \
				alphakappamod.f90 spergelpressmod.f90 \
				transgen.f90 fastevap.f90 \
			)
MAINSRC = $(SRCDIR)/main.f90
# Grab the source files via wildcards
WRSRCS = $(wildcard $(SRCDIR)/$(WDIR)/*.f $(SRCDIR)/$(RDIR)/*.f)
NUMSRCS = $(wildcard $(SRCDIR)/$(NUMDIR)/*.f*)
QAGSRCS = $(wildcard $(SRCDIR)/$(QAGDIR)/*.f)

# Use a string replace to get target names and directories for each object file
CAPTNOBJS = $(CAPTNSRCS:$(SRCDIR)/%.f90=$(OBJDIR)/%.o)
MAINOBJ = $(MAINSRC:$(SRCDIR)/%.f90=$(OBJDIR)/%.o)
WROBJS = $(WRSRCS:$(SRCDIR)/%.f=$(OBJDIR)/%.o)
temp = $(NUMSRCS:$(SRCDIR)/%.f90=$(OBJDIR)/%.o)
NUMOBJS = $(temp:$(SRCDIR)/%.f=$(OBJDIR)/%.o)
QAGOBJS = $(QAGSRCS:$(SRCDIR)/%.f=$(OBJDIR)/%.o)

CAPTNGEN_LIBNAME = gencap
TESTING_EXE = gentest.x

FC=gfortran
FFLAGS= -O3 -fPIC -std=legacy -fopenmp# -Wall -fbounds-check -g  #legacy is required if you are running gcc 10 or later 

LINKER=$(FC)
LDFLAGS=-fopenmp -L $(BINDIR)
#If the library follows the lib[name].so naming convention, then -l[name] can be used instead of -l:[name]lib.so
LSLIBS=-l$(CAPTNGEN_LIBNAME)


lib$(CAPTNGEN_LIBNAME).so: $(CAPTNOBJS) $(WROBJS) $(NUMOBJS) $(QAGOBJS)
	$(FC) -shared $^ -o $@

$(TESTING_EXE): $(MAINOBJ) lib$(CAPTNGEN_LIBNAME).so
	${LINKER} $(LDFLAGS) $< $(LSLIBS) -o $@


# Targets for each object file
$(OBJDIR)/%.o: $(SRCDIR)/%.f90 | $(OBJDIR)
	$(FC) $(FFLAGS) -c $< -o $@

$(OBJDIR)/$(WDIR)/%.o: $(SRCDIR)/$(WDIR)/%.f | $(OBJDIR)/$(WDIR)
	$(FC) $(FFLAGS) -c $< -o $@

$(OBJDIR)/$(RDIR)/%.o: $(SRCDIR)/$(RDIR)/%.f | $(OBJDIR)/$(RDIR)
	$(FC) $(FFLAGS) -c $< -o $@

# Both pchip.f90 and fftpack5.f90 raise a large number of 'argument-mismatch' errors
$(OBJDIR)/$(NUMDIR)/%.o: $(SRCDIR)/$(NUMDIR)/%.f90 | $(OBJDIR)/$(NUMDIR)
	$(FC) $(FFLAGS) -Wno-argument-mismatch -c  $< -o $@

$(OBJDIR)/$(NUMDIR)/%.o: $(SRCDIR)/$(NUMDIR)/%.f | $(OBJDIR)/$(NUMDIR)
	$(FC) $(FFLAGS) -c $< -o $@

$(OBJDIR)/$(QAGDIR)/%.o: $(SRCDIR)/$(QAGDIR)/%.f | $(OBJDIR)/$(QAGDIR)
	$(FC) $(FFLAGS) -c $< -o $@


# Targets to inform the makefile how to create the object directories if they don't exist yet
$(OBJDIR):
	mkdir -p $(OBJDIR)

$(OBJDIR)/$(WDIR):
	mkdir -p $(OBJDIR)/$(WDIR)

$(OBJDIR)/$(RDIR):
	mkdir -p $(OBJDIR)/$(RDIR)

$(OBJDIR)/$(NUMDIR):
	mkdir -p $(OBJDIR)/$(NUMDIR)

$(OBJDIR)/$(QAGDIR):
	mkdir -p $(OBJDIR)/$(QAGDIR)


# clean clears all objects and modules
clean:
	rm -f *.mod
	rm -f $(OBJDIR)/*.o $(OBJDIR)/*/*.o $(OBJDIR)/*/*/*.o

# nuke invokes clean and also clears the testing executable and library
nuke: clean
	rm -f $(BINDIR)/*.so
	rm -f $(BINDIR)/*.x

.PHONY: clean nuke
